/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
    if(head== null || head.next==null){ //base condition check
        return head;
    }
        
        ListNode middle=getmiddle(head); // find middle ele
        ListNode nextmiddle=middle.next;
        
        middle.next=null; 
        
        ListNode firstpart=sortList(head); // sort list (part 1)
        ListNode secondpart=sortList(nextmiddle); //sort list (part 2)
        return merge(firstpart,secondpart); // merge both lists
     }
    private ListNode getmiddle(ListNode node){
        ListNode slow=node;
        ListNode fast=node;
         while (fast.next != null && fast.next.next != null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    } 
    
    
    private ListNode merge(ListNode l1,ListNode l2){
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }
        
        if(l1.val<=l2.val){
            l1.next=merge(l1.next,l2);
            return l1;
        }
        else{
            l2.next=merge(l1,l2.next);
            return l2;
        }
    }
    
    
    
    
    
    
}
